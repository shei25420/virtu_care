import c from"fastify";import d from"fastify-plugin";import u from"@shared/rabbitmq";import p from"bcrypt";import{PrismaClient as l}from"@connectors/prisma";import h from"dotenv";class y{db=new l;async createUser(e){return e.password=await p.hash(e.password,10),await this.db.user.create({data:e})}async findUserById(e){return await this.db.user.findUnique({where:{id:e}})}async findUserByEmail(e){return await this.db.user.findUnique({where:{email:e}})}async updateUserById(e,s){return await this.db.user.update({where:{id:e},data:{email:s}})}async destroyUserById(e){return await this.db.user.delete({where:{id:e}})}}var w=(r=>(r.CRUD="crud",r.ANALYTICS="analytics",r))(w||{}),g=(r=>(r.CREATE="create",r.UPDATE="update",r.DESTROY="destroy",r.FETCHALL="fetchAll",r.FETCHBYID="fetchById",r))(g||{});class f extends u{repo;constructor(e){super(e),this.repo=new y}async handleCrudRequests(e,s){console.log("Kangura ngite");let a,t=null;if(e!=="fetchAll"&&(t=JSON.parse(s.toString()),!t))throw new Error(`Message type of: ${t} requires extra data`);try{switch(e){case"create":a=await this.repo.createUser(t);break;case"update":a=await this.repo.updateUserById(t.id,t.email);break;case"destroy":a=await this.repo.destroyUserById(t.id);break;case"fetchById":a=await this.repo.findUserById(t.id);break;default:throw new Error("Unsupported request type")}}catch(i){throw new Error("Error handling request",{cause:i})}return a}async consumeUserMessage(e){if(!e)return;let s={status:!0,data:null};try{const a=e.fields.routingKey.split(".")[1],t=e.fields.routingKey.split(".")[2];switch(a){case"crud":s.data=await this.handleCrudRequests(t,e.content);break;default:s.status=!1,s.data="Unsupported message type";break}}catch(a){console.log("Fucking error",a),s.status=!1,s.data=a,await this.sendMessageToQueue(e.properties.replyTo,Buffer.from(JSON.stringify(s)),!1),super._channel?.ack(e)}}async sendMessageToQueue(e,s,a,t){await super.sendMessageToQueue(e,s,a,t)}async createConnection(){await super.createConnection()}async createListeningExchangeByTopic(e,s){await super.createListeningExchangeByTopic(e,s,this.consumeUserMessage.bind(this))}}const m=d(async(r,e)=>{const s=process.env.RABBITMQ_USER||"user",a=process.env.RABBITMQ_PASSWD||"hunter",t=process.env.RABBITMQ_HOST||"localhost",i=process.env.RABBITMQ_VHOST||"",o=new f(`amqps://${s}:${a}@${t}/${i}`);await o.createConnection(),await o.createListeningExchangeByTopic("user",["user.#"]),r.decorate("rmq",o)});h.config();const n=c({logger:process.env.NODE_ENV==="development"}),B=async()=>{await n.register(m),n.listen({port:parseInt(process.env.SERVICE_PORT||"0"),host:process.env.SERVICE_HOST||""},(r,e)=>{r&&(n.log.error(r),process.exit(1)),n.log.info(`Server running at address: ${e}`)})};(async()=>await B())();
