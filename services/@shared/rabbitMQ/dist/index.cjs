"use strict";const amqplib=require("amqplib");class i{connectionUrl;_channel=null;connection=null;constructor(e){this.connectionUrl=e}async createConnection(){try{this.connection=await amqplib.connect(this.connectionUrl,{heartbeat:2}),this._channel=await this.connection.createChannel()}catch(e){throw new Error("Error creating connection",{cause:e})}}async createListeningExchangeByTopic(e,n,r){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No channel has been created yet");try{await this._channel.assertExchange(e,"topic",{durable:!0});const o=await this._channel.assertQueue("",{exclusive:!0});for(const t of n)await this._channel?.bindQueue(o.queue,e,t);console.log("[+] ready to receive messages");const c=await this._channel.consume(o.queue,r)}catch(o){throw new Error("Error creating listening exchange topic",{cause:o})}}async publishMessageToExchange(e,n,r,o){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No message broker channel created");try{const c=await this._channel.assertExchange(e,"topic",{durable:!0});this._channel.publish(e,n,r,o)}catch(c){throw new Error("Error publishing message to exchange",{cause:c})}}async createProducerQueue(e){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No message broker channel created");try{const n=await this._channel.assertQueue("",{exclusive:!0});return n&&await this._channel.consume(n.queue,e,{noAck:!0}),n}catch(n){throw new Error("Error creating producer queue",{cause:n})}}async sendMessageToQueue(e,n,r,o){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No message broker channel created");try{this._channel.sendToQueue(e,n),!r&&o&&this._channel.ack(o)}catch(c){throw new Error(`Error sending message to queue: ${e}`,{cause:c})}}async closeConnection(){if(!this.connection)throw new Error("No connection established to message broker");try{await this.connection.close(),this._channel=null,this.connection=null}catch(e){throw new Error("Error closing connection",{cause:e})}}}module.exports=i;
