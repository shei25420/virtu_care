"use strict";const amqplib=require("amqplib");class c{connectionUrl;_channel=null;connection=null;constructor(n){this.connectionUrl=n}async createConnection(){try{this.connection=await amqplib.connect(this.connectionUrl,{heartbeat:2}),this._channel=await this.connection.createChannel()}catch(n){throw new Error("Error creating connection",{cause:n})}}async createListeningExchangeByTopic(n,o,t){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No channel has been created yet");try{await this._channel.assertExchange(n,"topic",{durable:!0});const e=await this._channel.assertQueue("",{exclusive:!0});console.log("[+] waiting for messages");const a=await this._channel.consume(e.queue,t)}catch(e){throw new Error("Error creating listening exchange topic",{cause:e})}}async publishMessageToExchange(n,o,t){if(!this.connection)throw new Error("No connection to message broker");if(!this._channel)throw new Error("No message broker channel created");try{const e=await this._channel.assertExchange(n,"topic",{durable:!0});this.channel?.publish(n,o,Buffer.from(t))}catch(e){throw new Error("Error publishing message to exchange",{cause:e})}}async closeConnection(){if(!this.connection)throw new Error("No connection established to message broker");try{await this.connection.close(),this._channel=null,this.connection=null}catch(n){throw new Error("Error closing connection",{cause:n})}}get channel(){return this._channel}}module.exports=c;
